name: Clean Up Failed Workflow Runs

on:
  workflow_dispatch:
    inputs:
      max_age_days:
        description: 'Maximum age of runs to delete (in days)'
        required: false
        type: number
        default: 30
      dry_run:
        description: 'Dry run - show what would be deleted without actually deleting'
        required: false
        type: boolean
        default: true
      delete_cancelled:
        description: 'Delete cancelled workflow runs'
        required: false
        type: boolean
        default: true
      delete_errored:
        description: 'Delete failed/errored workflow runs'
        required: false
        type: boolean
        default: true
      delete_timed_out:
        description: 'Delete timed out workflow runs'
        required: false
        type: boolean
        default: true
      workflow_name:
        description: 'Specific workflow name to clean (leave empty for all workflows)'
        required: false
        type: string
        default: ''
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight UTC

env:
  GH_TOKEN: ${{ github.token }}

permissions:
  contents: read
  actions: write

jobs:
  check_permissions:
    runs-on: ubuntu-latest
    outputs:
      can_cleanup: ${{ steps.check.outputs.can_cleanup }}
    steps:
    - name: Check permissions or schedule
      id: check
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [ "${{ github.event_name }}" == "schedule" ]; then
          echo "can_cleanup=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Scheduled run, proceeding with cleanup."
          exit 0
        fi

        # Check if the triggering user has admin or maintain permissions
        USER_PERMISSION=$(gh api repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission --jq '.permission')
        echo "User ${{ github.actor }} has permission: $USER_PERMISSION"
        
        if [[ "$USER_PERMISSION" == "admin" || "$USER_PERMISSION" == "maintain" ]]; then
          echo "can_cleanup=true" >> $GITHUB_OUTPUT
          echo "‚úÖ User has sufficient permissions to delete workflow runs"
        else
          echo "can_cleanup=false" >> $GITHUB_OUTPUT
          echo "‚ùå User does not have admin/maintain permissions"
          exit 1
        fi

  cleanup_workflow_runs:
    needs: check_permissions
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup cleanup parameters
      id: setup
      run: |
        echo "Setting up cleanup parameters..."
        
        # Use schedule-specific defaults or manual inputs from workflow_dispatch
        MAX_AGE_DAYS=$([[ "${{ github.event_name }}" == "schedule" ]] && echo "0" || echo "${{ inputs.max_age_days }}")
        DRY_RUN=$([[ "${{ github.event_name }}" == "schedule" ]] && echo "false" || echo "${{ inputs.dry_run }}")
        DELETE_CANCELLED=$([[ "${{ github.event_name }}" == "schedule" ]] && echo "true" || echo "${{ inputs.delete_cancelled }}")
        DELETE_ERRORED=$([[ "${{ github.event_name }}" == "schedule" ]] && echo "true" || echo "${{ inputs.delete_errored }}")
        DELETE_TIMED_OUT=$([[ "${{ github.event_name }}" == "schedule" ]] && echo "true" || echo "${{ inputs.delete_timed_out }}")
        
        # Calculate cutoff date for age filtering
        if [ "$MAX_AGE_DAYS" != "" ] && [ "$MAX_AGE_DAYS" != "0" ]; then
          CUTOFF_DATE=$(date -d "$MAX_AGE_DAYS days ago" +%Y-%m-%d)
          echo "cutoff_date=$CUTOFF_DATE" >> $GITHUB_OUTPUT
          echo "üìÖ Will only delete runs older than: $CUTOFF_DATE"
        else
          echo "cutoff_date=" >> $GITHUB_OUTPUT
          echo "üìÖ No age restriction applied"
        fi
        
        # Setup status filters
        STATUSES=()
        if [ "$DELETE_CANCELLED" = "true" ]; then
          STATUSES+=("cancelled")
        fi
        if [ "$DELETE_ERRORED" = "true" ]; then
          STATUSES+=("failure")
        fi
        if [ "$DELETE_TIMED_OUT" = "true" ]; then
          STATUSES+=("timed_out")
        fi
        
        if [ ${#STATUSES[@]} -eq 0 ]; then
          echo "‚ùå No statuses selected for deletion"
          exit 1
        fi
        
        # Join statuses with comma
        STATUS_LIST=$(IFS=','; echo "${STATUSES[*]}")
        echo "status_list=$STATUS_LIST" >> $GITHUB_OUTPUT
        echo "üéØ Will target runs with statuses: $STATUS_LIST"
        
        if [ "$DRY_RUN" = "true" ]; then
          echo "üîç DRY RUN MODE - No actual deletions will be performed"
        else
          echo "‚ö†Ô∏è  LIVE MODE - Runs will be permanently deleted"
        fi

    - name: List workflows and get runs to delete
      id: list_runs
      env:
        CUTOFF_DATE: ${{ steps.setup.outputs.cutoff_date }}
        STATUS_LIST: ${{ steps.setup.outputs.status_list }}
        WORKFLOW_NAME: ${{ inputs.workflow_name }}
      run: |
        echo "üîç Scanning for workflow runs to delete..."
        
        BRANCH_FILTER=""
        if [ "${{ github.event_name }}" == "schedule" ]; then
            BRANCH_FILTER="&branch=master"
            echo "üåø Filtering for 'master' branch runs only."
        fi

        # Get list of workflows
        if [ -n "$WORKFLOW_NAME" ]; then
          echo "üìã Filtering for workflow: $WORKFLOW_NAME"
          WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/workflows --jq '.workflows[] | select(.name == "'"$WORKFLOW_NAME"'") | .id')
        else
          echo "üìã Scanning all workflows"
          WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/workflows --jq '.workflows[].id')
        fi
        
        if [ -z "$WORKFLOWS" ]; then
          echo "‚ùå No workflows found matching criteria"
          exit 1
        fi
        
        # Collect runs to delete
        RUNS_TO_DELETE=""
        TOTAL_RUNS=0
        TOTAL_SIZE=0
        
        for workflow_id in $WORKFLOWS; do
          echo "üîÑ Checking workflow ID: $workflow_id"
          
          # Get workflow name for logging
          WORKFLOW_INFO=$(gh api repos/${{ github.repository }}/actions/workflows/$workflow_id --jq '{name: .name, path: .path}')
          WORKFLOW_NAME_ACTUAL=$(echo "$WORKFLOW_INFO" | jq -r '.name')
          echo "  üìù Workflow: $WORKFLOW_NAME_ACTUAL"
          
          # Split status list and query each status
          IFS=',' read -ra STATUSES_ARRAY <<< "$STATUS_LIST"
          for status in "${STATUSES_ARRAY[@]}"; do
            echo "    üîç Checking status: $status"
            
            # Get runs with this status (paginated)
            page=1
            while true; do
              RUNS_PAGE=$(gh api "repos/${{ github.repository }}/actions/workflows/$workflow_id/runs?status=$status&per_page=100&page=$page$BRANCH_FILTER" \
                --jq '.workflow_runs[]')
              
              if [ -z "$RUNS_PAGE" ]; then
                break
              fi
              
              # Process each run
              while IFS= read -r run; do
                if [ -z "$run" ] || [ "$run" = "null" ]; then
                  continue
                fi
                
                RUN_ID=$(echo "$run" | jq -r '.id')
                RUN_DATE=$(echo "$run" | jq -r '.created_at')
                RUN_STATUS=$(echo "$run" | jq -r '.conclusion // .status')
                RUN_BRANCH=$(echo "$run" | jq -r '.head_branch // "unknown"')
                RUN_COMMIT=$(echo "$run" | jq -r '.head_sha[0:7]')
                
                # Skip if run is too recent
                if [ -n "$CUTOFF_DATE" ]; then
                  RUN_DATE_ONLY=$(echo "$RUN_DATE" | cut -d'T' -f1)
                  if [[ "$RUN_DATE_ONLY" > "$CUTOFF_DATE" ]]; then
                    continue
                  fi
                fi
                
                # Add to deletion list
                if [ -n "$RUNS_TO_DELETE" ]; then
                  RUNS_TO_DELETE="$RUNS_TO_DELETE,$RUN_ID"
                else
                  RUNS_TO_DELETE="$RUN_ID"
                fi
                
                TOTAL_RUNS=$((TOTAL_RUNS + 1))
                echo "    ‚û°Ô∏è  Found run: $RUN_ID ($RUN_STATUS) on $RUN_BRANCH ($RUN_COMMIT) from $RUN_DATE"
                
              done <<< "$RUNS_PAGE"
              
              page=$((page + 1))
            done
          done
        done
        
        echo ""
        echo "üìä SUMMARY:"
        echo "  ‚Ä¢ Total runs found: $TOTAL_RUNS"
        echo "  ‚Ä¢ Status filters: $STATUS_LIST"
        if [ -n "$CUTOFF_DATE" ]; then
          echo "  ‚Ä¢ Age filter: older than $CUTOFF_DATE"
        fi
        
        if [ $TOTAL_RUNS -eq 0 ]; then
          echo "‚úÖ No runs found matching deletion criteria"
          echo "runs_to_delete=" >> $GITHUB_OUTPUT
          echo "total_runs=0" >> $GITHUB_OUTPUT
        else
          echo "runs_to_delete=$RUNS_TO_DELETE" >> $GITHUB_OUTPUT
          echo "total_runs=$TOTAL_RUNS" >> $GITHUB_OUTPUT
        fi

    - name: Delete workflow runs
      if: steps.list_runs.outputs.total_runs != '0'
      env:
        RUNS_TO_DELETE: ${{ steps.list_runs.outputs.runs_to_delete }}
        TOTAL_RUNS: ${{ steps.list_runs.outputs.total_runs }}
        DRY_RUN: ${{ github.event_name == 'schedule' && 'false' || inputs.dry_run }}
      run: |
        if [ "$DRY_RUN" = "true" ]; then
          echo "üîç DRY RUN - Would delete $TOTAL_RUNS workflow runs"
          echo "Run IDs that would be deleted:"
          IFS=',' read -ra RUN_IDS <<< "$RUNS_TO_DELETE"
          for run_id in "${RUN_IDS[@]}"; do
            echo "  ‚Ä¢ $run_id"
          done
          echo ""
          echo "To actually delete these runs, re-run this workflow with 'Dry run' set to false"
          exit 0
        fi
        
        echo "üóëÔ∏è  DELETING $TOTAL_RUNS workflow runs..."
        
        DELETED_COUNT=0
        FAILED_COUNT=0
        
        IFS=',' read -ra RUN_IDS <<< "$RUNS_TO_DELETE"
        for run_id in "${RUN_IDS[@]}"; do
          echo "Deleting run: $run_id"
          
          if gh api -X DELETE "repos/${{ github.repository }}/actions/runs/$run_id" 2>/dev/null; then
            DELETED_COUNT=$((DELETED_COUNT + 1))
            echo "  ‚úÖ Deleted successfully"
          else
            FAILED_COUNT=$((FAILED_COUNT + 1))
            echo "  ‚ùå Failed to delete"
          fi
          
          # Add small delay to avoid rate limiting
          sleep 0.1
        done
        
        echo ""
        echo "üìä DELETION SUMMARY:"
        echo "  ‚Ä¢ Successfully deleted: $DELETED_COUNT runs"
        echo "  ‚Ä¢ Failed to delete: $FAILED_COUNT runs"
        echo "  ‚Ä¢ Total processed: $TOTAL_RUNS runs"
        
        if [ $FAILED_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è  Some deletions failed. This might be due to rate limiting or permissions."
          exit 1
        else
          echo "‚úÖ All deletions completed successfully!"
        fi

    - name: Cleanup summary
      if: always()
      run: |
        echo ""
        echo "üéØ CLEANUP WORKFLOW COMPLETED"
        echo "================================"
        if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Run type: Scheduled (Cron)"
            echo "Parameters used:"
            echo "  ‚Ä¢ Target Branch: master"
            echo "  ‚Ä¢ Max age: 0 days (no age restriction)"
            echo "  ‚Ä¢ Dry run: false"
            echo "  ‚Ä¢ Statuses: cancelled, failure, timed_out"
            echo "  ‚Ä¢ Workflow filter: All workflows"
        else
            echo "Run type: Manual Dispatch"
            echo "Parameters used:"
            echo "  ‚Ä¢ Max age: ${{ inputs.max_age_days }} days"
            echo "  ‚Ä¢ Dry run: ${{ inputs.dry_run }}"
            echo "  ‚Ä¢ Delete cancelled: ${{ inputs.delete_cancelled }}"
            echo "  ‚Ä¢ Delete errored: ${{ inputs.delete_errored }}"
            echo "  ‚Ä¢ Delete timed out: ${{ inputs.delete_timed_out }}"
            echo "  ‚Ä¢ Workflow filter: ${{ inputs.workflow_name || 'All workflows' }}"
        fi
        echo ""
        if [ "${{ inputs.dry_run }}" = "true" ] && [ "${{ github.event_name }}" != "schedule" ]; then
          echo "üí° This was a dry run. To actually delete runs, set 'Dry run' to false"
        fi
